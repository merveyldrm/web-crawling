from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse
import json
import asyncio
from datetime import datetime, timedelta
from typing import List, Dict
import sqlite3
from pathlib import Path

# Local imports
from realtime_rag_system import RealTimeCommentMonitor, RAGKnowledgeBase

app = FastAPI(title="Ger√ßek Zamanlƒ± Yorum Analiz Dashboard")

# Global state
monitor = RealTimeCommentMonitor(check_interval=30)
connected_clients: List[WebSocket] = []

class ConnectionManager:
    def __init__(self):
        self.active_connections: List[WebSocket] = []

    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.append(websocket)

    def disconnect(self, websocket: WebSocket):
        self.active_connections.remove(websocket)

    async def send_personal_message(self, message: str, websocket: WebSocket):
        await websocket.send_text(message)

    async def broadcast(self, message: str):
        for connection in self.active_connections:
            try:
                await connection.send_text(message)
            except:
                # Baƒülantƒ± kopmu≈ü, listeden √ßƒ±kar
                self.active_connections.remove(connection)

manager = ConnectionManager()

@app.get("/", response_class=HTMLResponse)
async def get_dashboard():
    """Ana dashboard sayfasƒ±"""
    html_content = """
<!DOCTYPE html>
<html>
<head>
    <title>Ger√ßek Zamanlƒ± Yorum Analiz Dashboard</title>
    <meta charset="utf-8">
    <style>
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            margin: 0; 
            padding: 20px; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        .container { 
            max-width: 1400px; 
            margin: 0 auto; 
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
            background: rgba(255,255,255,0.1);
            padding: 20px;
            border-radius: 15px;
            backdrop-filter: blur(10px);
        }
        .dashboard-grid {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }
        .card {
            background: rgba(255,255,255,0.15);
            padding: 20px;
            border-radius: 15px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.2);
        }
        .metric {
            text-align: center;
            font-size: 2em;
            font-weight: bold;
            margin: 10px 0;
        }
        .metric-label {
            font-size: 0.9em;
            opacity: 0.8;
        }
        .priority-high { color: #ff6b6b; }
        .priority-medium { color: #feca57; }
        .priority-low { color: #48cae4; }
        .live-feed {
            background: rgba(255,255,255,0.1);
            padding: 20px;
            border-radius: 15px;
            height: 400px;
            overflow-y: auto;
        }
        .log-entry {
            background: rgba(255,255,255,0.1);
            margin: 10px 0;
            padding: 10px;
            border-radius: 8px;
            border-left: 4px solid #4ecdc4;
        }
        .status-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
        }
        .status-active { background: #2ecc71; }
        .status-warning { background: #f39c12; }
        .status-critical { background: #e74c3c; }
        .controls {
            text-align: center;
            margin: 20px 0;
        }
        button {
            background: rgba(255,255,255,0.2);
            color: white;
            border: 1px solid rgba(255,255,255,0.3);
            padding: 12px 24px;
            border-radius: 25px;
            cursor: pointer;
            margin: 0 10px;
            font-size: 16px;
            transition: all 0.3s ease;
        }
        button:hover {
            background: rgba(255,255,255,0.3);
            transform: translateY(-2px);
        }
        .rag-section {
            margin-top: 30px;
        }
        .rag-query {
            width: 100%;
            padding: 15px;
            border-radius: 10px;
            border: 1px solid rgba(255,255,255,0.3);
            background: rgba(255,255,255,0.1);
            color: white;
            margin-bottom: 15px;
        }
        .rag-results {
            background: rgba(255,255,255,0.1);
            padding: 20px;
            border-radius: 15px;
            min-height: 200px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üöÄ Ger√ßek Zamanlƒ± Yorum Analiz Dashboard</h1>
            <p>RAG Destekli Otomatik ƒ∞zleme Sistemi</p>
            <div class="controls">
                <button onclick="startMonitoring()">‚ñ∂Ô∏è ƒ∞zlemeyi Ba≈ülat</button>
                <button onclick="stopMonitoring()">‚è∏Ô∏è ƒ∞zlemeyi Durdur</button>
                <button onclick="refreshData()">üîÑ Yenile</button>
            </div>
        </div>

        <div class="dashboard-grid">
            <div class="card">
                <div class="metric-label">Toplam Yorum</div>
                <div class="metric" id="totalComments">-</div>
                <div class="metric-label">Son g√ºncelleme: <span id="lastUpdate">-</span></div>
            </div>
            
            <div class="card">
                <div class="metric-label">Acil Kategoriler</div>
                <div class="metric priority-high" id="urgentCategories">-</div>
                <div class="metric-label">80+ √∂ncelik skoru</div>
            </div>
            
            <div class="card">
                <div class="metric-label">Sistem Durumu</div>
                <div class="metric">
                    <span class="status-indicator status-active" id="systemStatus"></span>
                    <span id="statusText">Aktif</span>
                </div>
                <div class="metric-label">Ger√ßek zamanlƒ± izleme</div>
            </div>
        </div>

        <div class="live-feed">
            <h3>üì° Canlƒ± ƒ∞zleme G√ºnl√ºƒü√º</h3>
            <div id="liveLogs">
                <div class="log-entry">
                    <strong>üöÄ Sistem ba≈ülatƒ±lƒ±yor...</strong><br>
                    <small>Dashboard y√ºklendi ve WebSocket baƒülantƒ±sƒ± kuruluyor</small>
                </div>
            </div>
        </div>

        <div class="rag-section">
            <div class="card">
                <h3>üß† RAG Bilgi Sorgulama</h3>
                <input type="text" class="rag-query" id="ragQuery" 
                       placeholder="√ñrn: kargo gecikmesi nasƒ±l √ß√∂z√ºl√ºr?"
                       onkeypress="if(event.key==='Enter') queryRAG()">
                <button onclick="queryRAG()">üîç Sorgula</button>
                
                <div class="rag-results" id="ragResults">
                    <em>RAG sistemi ile harici kaynaklardan bilgi almak i√ßin yukarƒ±ya bir soru yazƒ±n...</em>
                </div>
            </div>
        </div>
    </div>

    <script>
        // WebSocket baƒülantƒ±sƒ±
        const ws = new WebSocket("ws://localhost:8000/ws");
        let isMonitoring = false;

        ws.onopen = function(event) {
            addLog("‚úÖ WebSocket baƒülantƒ±sƒ± kuruldu", "success");
        };

        ws.onmessage = function(event) {
            const data = JSON.parse(event.data);
            handleRealTimeUpdate(data);
        };

        ws.onclose = function(event) {
            addLog("‚ùå WebSocket baƒülantƒ±sƒ± koptu", "error");
            document.getElementById("systemStatus").className = "status-indicator status-critical";
            document.getElementById("statusText").textContent = "Baƒülantƒ± Kopuk";
        };

        function handleRealTimeUpdate(data) {
            if (data.type === "new_analysis") {
                document.getElementById("totalComments").textContent = data.total_comments || "-";
                document.getElementById("urgentCategories").textContent = data.urgent_count || "0";
                document.getElementById("lastUpdate").textContent = new Date().toLocaleTimeString();
                
                addLog(`üìä ${data.new_comments || 0} yeni yorum analiz edildi`, "info");
                
                if (data.urgent_count > 0) {
                    addLog(`üö® ${data.urgent_count} acil kategori tespit edildi!`, "warning");
                }
            } else if (data.type === "system_status") {
                const statusEl = document.getElementById("systemStatus");
                const textEl = document.getElementById("statusText");
                
                if (data.status === "active") {
                    statusEl.className = "status-indicator status-active";
                    textEl.textContent = "Aktif";
                } else if (data.status === "warning") {
                    statusEl.className = "status-indicator status-warning";
                    textEl.textContent = "Uyarƒ±";
                } else {
                    statusEl.className = "status-indicator status-critical";
                    textEl.textContent = "Hata";
                }
            }
        }

        function addLog(message, type = "info") {
            const logsContainer = document.getElementById("liveLogs");
            const logEntry = document.createElement("div");
            logEntry.className = "log-entry";
            
            const timestamp = new Date().toLocaleTimeString();
            logEntry.innerHTML = `
                <strong>${message}</strong><br>
                <small>${timestamp}</small>
            `;
            
            logsContainer.insertBefore(logEntry, logsContainer.firstChild);
            
            // En fazla 20 log tut
            if (logsContainer.children.length > 20) {
                logsContainer.removeChild(logsContainer.lastChild);
            }
        }

        function startMonitoring() {
            ws.send(JSON.stringify({action: "start_monitoring"}));
            isMonitoring = true;
            addLog("üöÄ Ger√ßek zamanlƒ± izleme ba≈ülatƒ±ldƒ±", "success");
        }

        function stopMonitoring() {
            ws.send(JSON.stringify({action: "stop_monitoring"}));
            isMonitoring = false;
            addLog("‚è∏Ô∏è Ger√ßek zamanlƒ± izleme durduruldu", "info");
        }

        function refreshData() {
            ws.send(JSON.stringify({action: "refresh_data"}));
            addLog("üîÑ Veriler yenileniyor...", "info");
        }

        async function queryRAG() {
            const query = document.getElementById("ragQuery").value;
            if (!query.trim()) return;
            
            const resultsDiv = document.getElementById("ragResults");
            resultsDiv.innerHTML = "<em>üîç RAG sistemi sorgulanƒ±yor...</em>";
            
            try {
                const response = await fetch("/rag/query", {
                    method: "POST",
                    headers: {"Content-Type": "application/json"},
                    body: JSON.stringify({query: query})
                });
                
                const data = await response.json();
                
                let html = `<h4>üîç Sorgu: "${query}"</h4>`;
                
                if (data.results && data.results.length > 0) {
                    html += "<div style='margin-top: 15px;'>";
                    data.results.forEach((result, index) => {
                        html += `
                            <div style='margin-bottom: 15px; padding: 10px; background: rgba(255,255,255,0.1); border-radius: 8px;'>
                                <strong>${result.source_name}</strong> 
                                <span style='font-size: 0.9em; opacity: 0.8;'>(${(result.similarity * 100).toFixed(1)}% benzerlik)</span><br>
                                <div style='margin-top: 8px;'>${result.content}</div>
                            </div>
                        `;
                    });
                    html += "</div>";
                } else {
                    html += "<div style='margin-top: 15px; opacity: 0.7;'>ƒ∞lgili bilgi bulunamadƒ±.</div>";
                }
                
                resultsDiv.innerHTML = html;
                
            } catch (error) {
                resultsDiv.innerHTML = `<div style='color: #ff6b6b;'>‚ùå Hata: ${error.message}</div>`;
            }
        }

        // Sayfa y√ºklendiƒüinde veri al
        window.onload = function() {
            refreshData();
        };
    </script>
</body>
</html>
    """
    return html_content

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket endpoint ger√ßek zamanlƒ± g√ºncellemeler i√ßin"""
    await manager.connect(websocket)
    try:
        while True:
            data = await websocket.receive_text()
            message_data = json.loads(data)
            
            if message_data["action"] == "start_monitoring":
                # ƒ∞zlemeyi ba≈ülat (background task)
                asyncio.create_task(run_monitoring())
                await manager.send_personal_message(
                    json.dumps({
                        "type": "system_status",
                        "status": "active",
                        "message": "ƒ∞zleme ba≈ülatƒ±ldƒ±"
                    }), websocket)
            
            elif message_data["action"] == "stop_monitoring":
                monitor.stop_monitoring()
                await manager.send_personal_message(
                    json.dumps({
                        "type": "system_status", 
                        "status": "inactive",
                        "message": "ƒ∞zleme durduruldu"
                    }), websocket)
            
            elif message_data["action"] == "refresh_data":
                # Mevcut verileri g√∂nder
                stats = get_current_stats()
                await manager.send_personal_message(
                    json.dumps({
                        "type": "new_analysis",
                        "total_comments": stats["total_comments"],
                        "urgent_count": stats["urgent_count"],
                        "timestamp": datetime.now().isoformat()
                    }), websocket)
                    
    except WebSocketDisconnect:
        manager.disconnect(websocket)

@app.post("/rag/query")
async def query_rag(request: dict):
    """RAG sistemi sorgulama endpoint'i"""
    query = request.get("query", "")
    
    if not query:
        return {"error": "Sorgu bo≈ü olamaz"}
    
    try:
        # RAG bilgi tabanƒ±ndan ara
        results = monitor.rag_kb.find_relevant_context(query, limit=3)
        
        return {
            "query": query,
            "results": results,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        return {"error": str(e)}

@app.get("/api/stats")
async def get_stats():
    """Mevcut istatistikleri al"""
    return get_current_stats()

def get_current_stats():
    """Mevcut sistem istatistiklerini hesapla"""
    try:
        # Yorumlarƒ± y√ºkle
        comments = monitor.load_current_comments()
        
        if not comments:
            return {"total_comments": 0, "urgent_count": 0}
        
        # Hƒ±zlƒ± analiz
        analysis_results = monitor.comment_analyzer.analyze_all_comments(comments)
        priority_results = monitor.priority_analyzer.analyze_critical_issues(comments, analysis_results)
        
        # Acil kategori sayƒ±sƒ±nƒ± hesapla
        urgent_count = 0
        if priority_results and 'critical_issues' in priority_results:
            urgent_count = sum(
                1 for cat, data in priority_results['critical_issues'].items() 
                if data['priority_score'] >= 80
            )
        
        return {
            "total_comments": len(comments),
            "urgent_count": urgent_count,
            "last_updated": datetime.now().isoformat()
        }
    except Exception as e:
        return {"total_comments": 0, "urgent_count": 0, "error": str(e)}

async def run_monitoring():
    """Background task olarak izleme √ßalƒ±≈ütƒ±r"""
    
    previous_comment_count = 0
    
    while True:
        try:
            # Yeni yorumlarƒ± kontrol et
            new_comments = monitor.check_for_new_comments()
            
            if new_comments:
                # Analiz yap
                enhanced_analysis = monitor.enhanced_analysis_with_rag(new_comments)
                
                # WebSocket ile istemcilere g√∂nder
                stats = get_current_stats()
                
                await manager.broadcast(json.dumps({
                    "type": "new_analysis",
                    "new_comments": len(new_comments),
                    "total_comments": stats["total_comments"],
                    "urgent_count": stats["urgent_count"],
                    "timestamp": datetime.now().isoformat()
                }))
            
            # 30 saniye bekle
            await asyncio.sleep(30)
            
        except Exception as e:
            print(f"‚ùå Monitoring error: {e}")
            await asyncio.sleep(60)  # Hata durumunda biraz daha bekle

if __name__ == "__main__":
    import uvicorn
    
    print("üöÄ Ger√ßek Zamanlƒ± Dashboard Ba≈ülatƒ±lƒ±yor...")
    print("üåê http://localhost:8000 adresinden eri≈üebilirsiniz")
    
    uvicorn.run(app, host="0.0.0.0", port=8000) 